(defmodule KNOW_DOUBLE_MIDDLE (import MAIN ?ALL) (import ENV ?ALL) (import AGENT ?ALL)(export ?ALL))


;in questo modulo si trovano due regole che si attivano solamente se si conoscono 
;due caselle middle adiacenti, cio e sinonimo di una nave lunga 4


; barca in verticale 
(defrule double-middle-t-b 
	(status (step ?s)(currently running))
	(k-cell (x ?x)(y ?y)(content middle))
	(k-cell (x ?x1 &:(eq (+ ?x 1) ?x1))(y ?y)(content middle))
	?boats <- (closed-boats (four 0))
	?col1 <- (k-per-col (col ?y) (num ?val-col1))
	?row1 <- (k-per-row (row ?x) (num ?val-row1))
	?row2 <- (k-per-row (row ?xb &: (eq (- ?x 1) ?xb)) (num ?val-row2))
	?row3 <- (k-per-row (row ?x1) (num ?val-row3))
	?row4 <- (k-per-row (row ?x2&: (eq (+ ?x 2) ?x2)) (num ?val-row4))
	=>
	(modify ?boats(four 1))
	(modify ?col1(num (- ?val-col1 4)))
	(modify ?row1(num (- ?val-row1 1)))
	(modify ?row2(num (- ?val-row2 1)))
	(modify ?row3(num (- ?val-row3 1)))
	(modify ?row4(num (- ?val-row4 1)))
	(assert(to-guess(x ?x) (y ?y)))
	(assert(to-guess(x ?x1) (y ?y)))
	(assert(to-guess(x ?x2) (y ?y)))
	(assert(to-guess(x ?xb) (y ?y)))
	(assert(to-guess (x (- ?x 2))(y (+ ?y 1))))
	(assert(to-guess (x (- ?x 2))(y ?y)))
	(assert(to-guess (x (- ?x 2))(y (- ?y 1))))
	(assert(to-guess (x (- ?x 1))(y (+ ?y 1))))
	(assert(to-guess (x (- ?x 1))(y (- ?y 1))))
	(assert(to-guess (x ?x)(y (+ ?y 1))))
	(assert(to-guess (x ?x)(y (- ?y 2))))
	(assert(to-guess (x (+ ?x 1))(y (+ ?y 1))))
	(assert(to-guess (x (+ ?x 1))(y (- ?y 1))))
	(assert(to-guess (x (+ ?x 2))(y (+ ?y 1))))
	(assert(to-guess (x (+ ?x 2))(y (- ?y 1))))
	(assert(to-guess (x (+ ?x 3))(y (+ ?y 1))))
	(assert(to-guess (x (+ ?x 3))(y ?y)))
	(assert(to-guess (x (+ ?x 3))(y (- ?y 1))))
	(assert(exec (step ?s) (action guess) (x ?xb)(y ?y)))
	(assert (ausiliar-exec (action guess) (x ?x)(y ?y)))
	(assert (ausiliar-exec (action guess) (x ?x1)(y ?y)))
	(assert (ausiliar-exec (action guess) (x ?x2)(y ?y)))
	(printout t "(double-middle-t-b) x " ?x " y " ?y " e in x1 " ?x1 " y1 " ?y " quindi so di avere una barca da 4 "  crlf)
	(assert(return))
    (pop-focus)
)


; barca in orizzontale 
(defrule double-middle-l-r 
	(status (step ?s)(currently running))
	(k-cell (x ?x)(y ?y)(content middle))
	(k-cell (x ?x)(y ?y1 &:(eq (+ ?y 1) ?y1))(content middle))
	?boats <- (closed-boats (four 0))
	?row1 <- (k-per-row (row ?x) (num ?val-row1))
	?col1 <- (k-per-col (col ?y) (num ?val-col1))
	?col2 <- (k-per-col (col ?yb &: (eq (- ?y 1) ?yb)) (num ?val-col2))
	?col3 <- (k-per-col (col ?y1) (num ?val-col3))
	?col4 <- (k-per-col (col ?y2&: (eq (+ ?y 2) ?y2)) (num ?val-col4))
	=>
	(modify ?boats(four 1))
	(modify ?row1(num (- ?val-row1 4)))
	(modify ?col1(num (- ?val-col1 1)))
	(modify ?col2(num (- ?val-col2 1)))
	(modify ?col3(num (- ?val-col3 1)))
	(modify ?col4(num (- ?val-col4 1)))
	(assert(to-guess(x ?x) (y ?y)))
	(assert(to-guess(x ?x) (y ?y1)))
	(assert(to-guess(x ?x) (y ?y2)))
	(assert(to-guess(x ?x) (y ?yb)))
	(assert(to-guess (x (- ?x 1))(y (+ ?y 1))))
	(assert(to-guess (x (- ?x 1))(y (+ ?y 2))))
	(assert(to-guess (x (- ?x 1))(y (+ ?y 3))))
	(assert(to-guess (x (- ?x 1))(y ?y)))
	(assert(to-guess (x (- ?x 1))(y (- ?y 1))))
	(assert(to-guess (x (- ?x 1))(y (- ?y 2))))
	(assert(to-guess (x ?x)(y (+ ?y 3))))
	(assert(to-guess (x ?x)(y (- ?y 2))))
	(assert(to-guess (x (+ ?x 1))(y (+ ?y 1))))
	(assert(to-guess (x (+ ?x 1))(y (+ ?y 2))))
	(assert(to-guess (x (+ ?x 1))(y (+ ?y 3))))
	(assert(to-guess (x (+ ?x 1))(y ?y)))
	(assert(to-guess (x (+ ?x 1))(y (- ?y 1))))
	(assert(to-guess (x (+ ?x 1))(y (- ?y 2))))
	(assert(exec (step ?s) (action guess) (x ?x) (y ?y2)))
	(assert (ausiliar-exec (action guess) (x ?x)(y ?y1)))
	(assert (ausiliar-exec (action guess) (x ?x)(y ?y)))
	(assert (ausiliar-exec (action guess) (x ?x)(y ?yb)))
	(printout t "(duble-middle-l-r) x " ?x " y " ?y " e in x1 " ?x " y1 " ?y1 " quindi so di avere una barca da 4 "  crlf)
	(assert(return))
    (pop-focus)
)